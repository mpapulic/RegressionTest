//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegressionTest
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using PluginLibrary;


    public class AdministrationPreferencesUrgentDay : WebTest
    {

        public AdministrationPreferencesUrgentDay()
        {
            this.Context.Add("WebServer1", "http://oyezgateway.test.gowi.rs");
            // Paametri testa
            this.Context.Add("UrgentDays", "10");
            this.Context.Add("VeryUrgentDays", "5");
            this.Context.Add("AttachedFile", "DEED OF CHARGE.pdf");
            // Charge date je ovde ostavljen prazan ali se naknadno racuna i jednak je Danas - DaysInPast
            this.Context.Add("ChargeDateDay", "");
            this.Context.Add("ChargeDateMonth", "");
            this.Context.Add("ChargeDateYear", "");
            this.Context.Add("SubmissionGUID", "{{$HIDDEN1.Id}}");
            // moguce je definisati koja se urgentnost testira 
            // Danas - 21 + VeryUrgentDays  do Danas - 21 + UrgentDays => definise vreme unutar kojeg imamo URGENT 
            // Danas - 21 do Danas - 21 + VeryUrgentDays => definise vreme unutar ojeg imamo VERYURGENT 
            this.Context.Add("IsUrgentSubmission", "true");
            this.Context.Add("IsVeryUrgentSubmission", "false");
            this.Context.Add("DaysInPast", "12");
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule1 = new ValidationRuleResponseTimeGoal();
                validationRule1.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }

            WebTestRequest request1 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/"));
            request1.ReportingName = "Home";
            request1.ExpectedResponseUrl = (this.Context["WebServer1"].ToString() + "/Account/Login");
            ExtractHiddenFields extractionRule1 = new ExtractHiddenFields();
            extractionRule1.Required = true;
            extractionRule1.HtmlDecode = true;
            extractionRule1.ContextParameterName = "1";
            request1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Account/Login"));
            request2.ReportingName = "Login";
            request2.Method = "POST";
            request2.ExpectedResponseUrl = (this.Context["WebServer1"].ToString() + "/Admin/Report");
            request2.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Account/Login")));
            FormPostHttpBody request2Body = new FormPostHttpBody();
            request2Body.FormPostParameters.Add("ReturnUrl", this.Context["$HIDDEN1.ReturnUrl"].ToString());
            request2Body.FormPostParameters.Add("UserName", "admin.milan.papulic@gowi.rs");
            request2Body.FormPostParameters.Add("Password", "password");
            request2.Body = request2Body;
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Admin/Admin/Preferences"));
            request3.ReportingName = "Reports";
            request3.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Admin/Report")));
            ExtractHiddenFields extractionRule2 = new ExtractHiddenFields();
            extractionRule2.Required = true;
            extractionRule2.HtmlDecode = true;
            extractionRule2.ContextParameterName = "1";
            request3.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Admin/Admin/Preferences"));
            request4.ReportingName = "Preferences";
            request4.Method = "POST";
            request4.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Admin/Admin/Preferences")));
            FormPostHttpBody request4Body = new FormPostHttpBody();
            request4Body.FormPostParameters.Add("Id", this.Context["$HIDDEN1.Id"].ToString());
            request4Body.FormPostParameters.Add("UseTestEnvironment", this.Context["$HIDDEN1.UseTestEnvironment"].ToString());
            request4Body.FormPostParameters.Add("UserAttempCountLimit", this.Context["$HIDDEN1.UserAttempCountLimit"].ToString());
            request4Body.FormPostParameters.Add("UserPasswordHistoryLimit", this.Context["$HIDDEN1.UserPasswordHistoryLimit"].ToString());
            request4Body.FormPostParameters.Add("CertifiedByInformationOnSubmitToCH", this.Context["$HIDDEN1.CertifiedByInformationOnSubmitToCH"].ToString());
            request4Body.FormPostParameters.Add("DisplayThreeIdQuestionsOnly", "true");
            request4Body.FormPostParameters.Add("DisplayThreeIdQuestionsOnly", this.Context["$HIDDEN1.DisplayThreeIdQuestionsOnly"].ToString());
            request4Body.FormPostParameters.Add("YesStatement", "YES PART");
            request4Body.FormPostParameters.Add("NoStatement", "NO PART");
            request4Body.FormPostParameters.Add("UrgentDays", this.Context["UrgentDays"].ToString());
            request4Body.FormPostParameters.Add("VeryUrgentDays", this.Context["VeryUrgentDays"].ToString());
            request4Body.FormPostParameters.Add("ArchiveDays", "15");
            request4Body.FormPostParameters.Add("CustomerReferenceEditable", this.Context["$HIDDEN1.CustomerReferenceEditable"].ToString());
            request4Body.FormPostParameters.Add("ClientMatterNumberVisible", "true");
            request4Body.FormPostParameters.Add("ClientMatterNumberVisible", this.Context["$HIDDEN1.ClientMatterNumberVisible"].ToString());
            request4Body.FormPostParameters.Add("ClientMatterNumberRequired", "true");
            request4Body.FormPostParameters.Add("ClientMatterNumberRequired", this.Context["$HIDDEN1.ClientMatterNumberRequired"].ToString());
            request4Body.FormPostParameters.Add("CompanyHouseWorkingAlertVisible", "true");
            request4Body.FormPostParameters.Add("CompanyHouseWorkingAlertVisible", this.Context["$HIDDEN1.CompanyHouseWorkingAlertVisible"].ToString());
            request4Body.FormPostParameters.Add("SendChApprovedEmailToOrgAdmin", this.Context["$HIDDEN1.SendChApprovedEmailToOrgAdmin"].ToString());
            request4Body.FormPostParameters.Add("SendChRejectedEmailToOrgAdmin", "true");
            request4Body.FormPostParameters.Add("SendChRejectedEmailToOrgAdmin", this.Context["$HIDDEN1.SendChRejectedEmailToOrgAdmin"].ToString());
            request4Body.FormPostParameters.Add("SendInternalApprovedEmailToOrgAdmin", this.Context["$HIDDEN1.SendInternalApprovedEmailToOrgAdmin"].ToString());
            request4Body.FormPostParameters.Add("SendInternalRejectedEmailToOrgAdmin", this.Context["$HIDDEN1.SendInternalRejectedEmailToOrgAdmin"].ToString());
            request4Body.FormPostParameters.Add("AccountManagerEmail", "");
            request4Body.FormPostParameters.Add("ShowSendLinkInviteURL", this.Context["$HIDDEN1.ShowSendLinkInviteURL"].ToString());
            request4Body.FormPostParameters.Add("IsDateFromCreated", "true");
            request4Body.FormPostParameters.Add("IsDateFromCreated", this.Context["$HIDDEN1.IsDateFromCreated"].ToString());
            request4Body.FormPostParameters.Add("SortApproversBy", "2");
            request4Body.FormPostParameters.Add("RestrictedAccessStatus", "0");
            request4Body.FormPostParameters.Add("IsPdfLimit", this.Context["$HIDDEN1.IsPdfLimit"].ToString());
            request4.Body = request4Body;
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Mr01/Create"));
            request5.ReportingName = "Create new MR01";
            request5.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Admin/Admin/Preferences")));
            request5.QueryStringParameters.Add("typeId", "1", false, false);
            ExtractHiddenFields extractionRule3 = new ExtractHiddenFields();
            extractionRule3.Required = true;
            extractionRule3.HtmlDecode = true;
            extractionRule3.ContextParameterName = "1";
            request5.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule3.Extract);
            ExtractText extractionRule4 = new ExtractText();
            extractionRule4.StartsWith = "lue=\"";
            extractionRule4.EndsWith = "\" />\r";
            extractionRule4.Index = 18;
            extractionRule4.IgnoreCase = false;
            extractionRule4.UseRegularExpression = false;
            extractionRule4.HtmlDecode = true;
            extractionRule4.Required = false;
            extractionRule4.ContextParameterName = "FormPostParam13.submissionId";
            request5.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule4.Extract);
            ChargeDatePlugin requestPlugin1 = new ChargeDatePlugin();
            requestPlugin1.ParameterName = "Charge Creation date";
            requestPlugin1.daysInPast = Int32.Parse(Context["DaysInPast"].ToString());
            request5.PreRequestDataBinding += new EventHandler<PreRequestDataBindingEventArgs>(requestPlugin1.PreRequestDataBinding);
            request5.PreRequest += new EventHandler<PreRequestEventArgs>(requestPlugin1.PreRequest);
            request5.PostRequest += new EventHandler<PostRequestEventArgs>(requestPlugin1.PostRequest);
            yield return request5;
            request5 = null;

            WebTestRequest request6 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Submission/CompanySearch"));
            request6.ThinkTime = 2;
            request6.ReportingName = "Company search";
            request6.Method = "POST";
            request6.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request6.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request6.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Mr01/Create?typeId=1")));
            FormPostHttpBody request6Body = new FormPostHttpBody();
            request6Body.FormPostParameters.Add("companyNo", "");
            request6Body.FormPostParameters.Add("companyName", "MILE");
            request6Body.FormPostParameters.Add("companyAuthCode", "undefined");
            request6.Body = request6Body;
            yield return request6;
            request6 = null;

            WebTestRequest request7 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Submission/CompanyDetails"));
            request7.ThinkTime = 33;
            request7.ReportingName = "Company details";
            request7.Method = "POST";
            request7.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request7.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request7.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Mr01/Create?typeId=1")));
            FormPostHttpBody request7Body = new FormPostHttpBody();
            request7Body.FormPostParameters.Add("companyNr", "05292202");
            request7.Body = request7Body;
            yield return request7;
            request7 = null;

            WebTestRequest request8 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Submission/AttachFile"));
            request8.ThinkTime = 18;
            request8.ReportingName = "Attach files";
            request8.Method = "POST";
            request8.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request8.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request8.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Mr01/Create?typeId=1")));
            FormPostHttpBody request8Body = new FormPostHttpBody();
            request8Body.FormPostParameters.Add("submissionId", this.Context["FormPostParam13.submissionId"].ToString());
            request8Body.FormPostParameters.Add("attachmentNumber", "1");
            request8Body.FormPostParameters.Add("isInEditMode", "True");
            request8Body.FormPostParameters.Add(new FileUploadParameter("file", "DEED OF CHARGE.pdf", "application/pdf", true));
            request8.Body = request8Body;
            yield return request8;
            request8 = null;

            WebTestRequest request9 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Mr01/Create"));
            request9.ReportingName = "Data enter";
            request9.Method = "POST";
            request9.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Mr01/Create?typeId=1")));
            FormPostHttpBody request9Body = new FormPostHttpBody();
            request9Body.FormPostParameters.Add("Title", "TEST-14 DAYS AGO");
            request9Body.FormPostParameters.Add("isDesignatedApprover", this.Context["$HIDDEN1.isDesignatedApprover"].ToString());
            request9Body.FormPostParameters.Add("isCurrentUserCreator", this.Context["$HIDDEN1.isCurrentUserCreator"].ToString());
            request9Body.FormPostParameters.Add("submissionStatusId", this.Context["$HIDDEN1.submissionStatusId"].ToString());
            request9Body.FormPostParameters.Add("CanApprove", this.Context["$HIDDEN1.CanApprove"].ToString());
            request9Body.FormPostParameters.Add("submit", "draft");
            request9Body.FormPostParameters.Add("ClientMatterNumberP1", "1");
            request9Body.FormPostParameters.Add("ClientMatterNumberP2", "2");
            request9Body.FormPostParameters.Add("CustomerReferenceEditable", this.Context["$HIDDEN1.CustomerReferenceEditable"].ToString());
            request9Body.FormPostParameters.Add("DateCreated", this.Context["$HIDDEN1.DateCreated"].ToString());
            request9Body.FormPostParameters.Add("IsPrivate", this.Context["$HIDDEN1.IsPrivate"].ToString());
            request9Body.FormPostParameters.Add("ClientMatterNumberVisible", this.Context["$HIDDEN1.ClientMatterNumberVisible"].ToString());
            request9Body.FormPostParameters.Add("ClientMatterNumberRequired", this.Context["$HIDDEN1.ClientMatterNumberRequired"].ToString());
            request9Body.FormPostParameters.Add("RestrictedAccessStatus", this.Context["$HIDDEN1.RestrictedAccessStatus"].ToString());
            request9Body.FormPostParameters.Add("Id", this.Context["$HIDDEN1.Id"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.FirstName", this.Context["$HIDDEN1.CreatedBy.FirstName"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.LastName", this.Context["$HIDDEN1.CreatedBy.LastName"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.Email", this.Context["$HIDDEN1.CreatedBy.Email"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.Guid", this.Context["$HIDDEN1.CreatedBy.Guid"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.GroupList.SelectedGroupIds", this.Context["$HIDDEN1.CreatedBy.GroupList.SelectedGroupIds"].ToString());
            request9Body.FormPostParameters.Add("SubmissionStatus.Id", this.Context["$HIDDEN1.SubmissionStatus.Id"].ToString());
            request9Body.FormPostParameters.Add("SubmissionTypeId", this.Context["$HIDDEN1.SubmissionTypeId"].ToString());
            request9Body.FormPostParameters.Add("SubmissionTypeTitle", this.Context["$HIDDEN1.SubmissionTypeTitle"].ToString());
            request9Body.FormPostParameters.Add("SubmissionTypeTitleLong", this.Context["$HIDDEN1.SubmissionTypeTitleLong"].ToString());
            request9Body.FormPostParameters.Add("FileKey", this.Context["$HIDDEN1.FileKey"].ToString());
            request9Body.FormPostParameters.Add("UseTestEnvironment", this.Context["$HIDDEN1.UseTestEnvironment"].ToString());
            request9Body.FormPostParameters.Add("CertifiedByInformationOnSubmitToCH", this.Context["$HIDDEN1.CertifiedByInformationOnSubmitToCH"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.Organization.IsPdfLimit", this.Context["$HIDDEN1.CreatedBy.Organization.IsPdfLimit"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.Organization.AccountManagerEmail", this.Context["$HIDDEN1.CreatedBy.Organization.AccountManagerEmail"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.Organization.YesStatement", this.Context["$HIDDEN1.CreatedBy.Organization.YesStatement"].ToString());
            request9Body.FormPostParameters.Add("CreatedBy.Organization.NoStatement", this.Context["$HIDDEN1.CreatedBy.Organization.NoStatement"].ToString());
            request9Body.FormPostParameters.Add("SearchPost", this.Context["$HIDDEN1.SearchPost"].ToString());
            request9Body.FormPostParameters.Add("CompanyTypeCode", "EW");
            request9Body.FormPostParameters.Add("CompanyNumber", "05292202");
            request9Body.FormPostParameters.Add("CompanyFullName", "MILE LTD, UNIT 1, 146-148 GRANVILLE ROAD, LONDON, NW2 2LD");
            request9Body.FormPostParameters.Add("ChargeCreationDateDay", this.Context["ChargeDateDay"].ToString());
            request9Body.FormPostParameters.Add("ChargeCreationDateMonth", this.Context["ChargeDateMonth"].ToString());
            request9Body.FormPostParameters.Add("ChargeCreationDateYear", this.Context["ChargeDateYear"].ToString());
            request9Body.FormPostParameters.Add("ChargeCreationDate", this.Context["$HIDDEN1.ChargeCreationDate"].ToString());
            request9Body.FormPostParameters.Add("ChargeName1", "TEST");
            request9Body.FormPostParameters.Add("ChargeName2", "");
            request9Body.FormPostParameters.Add("ChargeName3", "");
            request9Body.FormPostParameters.Add("ChargeName4", "");
            request9Body.FormPostParameters.Add("AdditionalCharges", this.Context["$HIDDEN1.AdditionalCharges"].ToString());
            request9Body.FormPostParameters.Add("Description", "TEST");
            request9Body.FormPostParameters.Add("IncludeFixedCharge", "true");
            request9Body.FormPostParameters.Add("FloatingCharge", "true");
            request9Body.FormPostParameters.Add("FloatingChargeComplete", this.Context["$HIDDEN1.FloatingChargeComplete"].ToString());
            request9Body.FormPostParameters.Add("IsNegativePledge", "true");
            request9Body.FormPostParameters.Add("IsTrusteeStatement", "true");
            request9Body.FormPostParameters.Add("UploadErrorNotificator", this.Context["$HIDDEN1.UploadErrorNotificator"].ToString());
            request9Body.FormPostParameters.Add("CertificationYesStatementLabel", this.Context["$HIDDEN1.CertificationYesStatementLabel"].ToString());
            request9Body.FormPostParameters.Add("CertificationNoStatementLabel", this.Context["$HIDDEN1.CertificationNoStatementLabel"].ToString());
            request9Body.FormPostParameters.Add("IsPartOfDeedReducted", "2");
            request9Body.FormPostParameters.Add("Statement", "YES PART");
            request9Body.FormPostParameters.Add("CertifiedBy", "TEST");
            request9Body.FormPostParameters.Add("IsMr01OrMr02", this.Context["$HIDDEN1.IsMr01OrMr02"].ToString());
            request9Body.FormPostParameters.Add("SubmissionTypeId", this.Context["$HIDDEN1.SubmissionTypeId"].ToString());
            request9Body.FormPostParameters.Add("DisplayThreeIdQuestionsOnly", this.Context["$HIDDEN1.DisplayThreeIdQuestionsOnly"].ToString());
            request9Body.FormPostParameters.Add("AuthQuestion1", "TEL");
            request9Body.FormPostParameters.Add("AuthAnswer1", "111");
            request9Body.FormPostParameters.Add("AuthQuestion2", "BIRTOWN");
            request9Body.FormPostParameters.Add("AuthAnswer2", "VFR");
            request9Body.FormPostParameters.Add("AuthQuestion3", "EYE");
            request9Body.FormPostParameters.Add("AuthAnswer3", "SAA");
            request9Body.FormPostParameters.Add(new FileUploadParameter("files", "", "application/octet-stream", true));
            request9Body.FormPostParameters.Add(new FileUploadParameter("files", "", "application/octet-stream", true));
            request9.Body = request9Body;
            ExtractFormField extractionRule5 = new ExtractFormField();
            extractionRule5.Name = "Id";
            extractionRule5.HtmlDecode = true;
            extractionRule5.Required = true;
            extractionRule5.Index = 0;
            extractionRule5.ContextParameterName = "SubmissionGUID";
            request9.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule5.Extract);
            yield return request9;
            request9 = null;

            WebTestRequest request10 = new WebTestRequest((this.Context["WebServer1"].ToString()
                            + ("/Mr01/Edit/" + this.Context["SubmissionGUID"].ToString())));
            request10.ReportingName = "Save";
            request10.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Mr01/Create?typeId=1")));
            request10.QueryStringParameters.Add("typeId", "1", false, false);
            yield return request10;
            request10 = null;


            WebTestRequest request11 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Submission/Index"));
            request11.ReportingName = "Global submission list";
            request11.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString()
                                + ("/Mr01/Edit/"
                                + (this.Context["SubmissionGUID"].ToString() + "?typeId=1")))));
            CheckUrgentPlugIn extractionRule6 = new CheckUrgentPlugIn();
            extractionRule6.IsUrgentValid = "PASS";
            extractionRule6.ContextParameterName = "IsUrgentSubmission";
            request11.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule6.Extract);
            yield return request11;
            // NAPOMENA: prethodnu komandu "yield return request11;"sam dodao kako bi se proracunata vrednost za IsUrgentValid azurirala tokom extract-a 
            // Nakon toga mogu da je koristim u proveri da li je uslov zadovoljen
            // Samo ako uslov nije zadovoljen pozivam Validate kako bih mogao da test proglasim neuspelim 
            // ( ZA SADA NE ZNAM BOLJI NACIN JER NISAM U MOGUCNOSTI DA U VALIDATE CITAM VREDNOSTI IZ CONTEXTA )

            if (this.Context["IsUrgentValid"].ToString() == "FAILED")
            {
                UrgentSubmissionValidate validationRuleUrgent = new UrgentSubmissionValidate();
                request11.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRuleUrgent.Validate);
                //System.IO.File.WriteAllText(@"C:\Temp\PreValidate.txt", $"Pre ulaska  u Validaciju ispis nekog contexta: { this.Context["WebServer1"].ToString()} a onda ispis i zeljenog kontexta: {this.Context["IsUrgentCheck"].ToString()}.");
            }
            yield return request11;
            request11 = null;


            WebTestRequest request12 = new WebTestRequest((this.Context["WebServer1"].ToString()
                            + ("/Submission/Edit/" + this.Context["SubmissionGUID"].ToString())));
            request12.ReportingName = "Edit submission";
            request12.ExpectedResponseUrl = (this.Context["WebServer1"].ToString()
                        + ("/Mr01/Edit/"
                        + (this.Context["SubmissionGUID"].ToString() + "?typeId=1")));
            request12.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Submission/Index")));
            yield return request12;
            request12 = null;

            WebTestRequest request13 = new WebTestRequest((this.Context["WebServer1"].ToString()
                            + ("/Submission/Delete/" + this.Context["SubmissionGUID"].ToString())));
            request13.ReportingName = "Delete submission";
            request13.ExpectedResponseUrl = (this.Context["WebServer1"].ToString() + "/Submission/Index");
            request13.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Mr01/Edit/71946b60-b205-4211-9660-6f9eabeae83a?typeId=1")));
            yield return request13;
            request13 = null;

            WebTestRequest request14 = new WebTestRequest((this.Context["WebServer1"].ToString() + "/Account/Logout"));
            request14.ReportingName = "Logout";
            request14.ExpectedResponseUrl = (this.Context["WebServer1"].ToString() + "/Account/Login");
            request14.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["WebServer1"].ToString() + "/Submission/Index")));
            yield return request14;
            request14 = null;
        }
    }
}
